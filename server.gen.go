// Code generated by oto; DO NOT EDIT.

package main

import (
	"context"
	"net/http"

	"github.com/pacedotdev/oto/otohttp"
	"gorm.io/gorm"
)

// ConferenceService is a service for managing Conferences
type ConferenceService interface {
	Get(context.Context, GetConferenceRequest) (*GetConferenceResponse, error)
	// Greet prepares a lovely greeting.
	List(context.Context, ListConferenceRequest) (*ListConferenceResponse, error)
}

type conferenceServiceServer struct {
	server            *otohttp.Server
	conferenceService ConferenceService
}

// Register adds the ConferenceService to the otohttp.Server.
func RegisterConferenceService(server *otohttp.Server, conferenceService ConferenceService) {
	handler := &conferenceServiceServer{
		server:            server,
		conferenceService: conferenceService,
	}
	server.Register("ConferenceService", "Get", handler.handleGet)
	server.Register("ConferenceService", "List", handler.handleList)
}

func (s *conferenceServiceServer) handleGet(w http.ResponseWriter, r *http.Request) {
	var request GetConferenceRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.conferenceService.Get(r.Context(), request)
	if err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

func (s *conferenceServiceServer) handleList(w http.ResponseWriter, r *http.Request) {
	var request ListConferenceRequest
	if err := otohttp.Decode(r, &request); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	response, err := s.conferenceService.List(r.Context(), request)
	if err != nil {
		s.server.OnErr(w, r, err)
		return
	}
	if err := otohttp.Encode(w, r, http.StatusOK, response); err != nil {
		s.server.OnErr(w, r, err)
		return
	}
}

// Event is an instance like GopherCon 2020
type Event struct {
	ID   uint   `json:"id"`
	Name string `json:"name"`
	Slug string `json:"slug"`
	// StartDate time.Time EndDate time.Time
	Location string `json:"location"`
}

// Conference is a brand like GopherCon
type Conference struct {
	ID     uint    `json:"id"`
	Name   string  `json:"name"`
	Events []Event `json:"events"`
}

// GetConferenceRequest is the request object for ConferenceService.Get.
type GetConferenceRequest struct {
}

// GetConferenceResponse is the response object containing a single Conference
type GetConferenceResponse struct {

	// Conference represents an event like GopherCon 2020
	Conference Conference `json:"conference"`
	// Error is string explaining what went wrong. Empty if everything was fine.
	Error string `json:"error,omitempty"`
}

// ListConferenceRequest is the request object for ConferenceService.List.
type ListConferenceRequest struct {
}

// ListConferenceResponse is the response object containing a list of Conferences
type ListConferenceResponse struct {

	// Greeting is a nice message welcoming somebody.
	Conferences []Conference `json:"conferences"`
	// Error is string explaining what went wrong. Empty if everything was fine.
	Error string `json:"error,omitempty"`
}
