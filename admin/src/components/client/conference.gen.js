// Code generated by oto; DO NOT EDIT.

'use strict';


export default class ConferenceService {

	async get(getConferenceRequest) {
		const headers = {
			'Accept': 'application/json',
			'Accept-Encoding': 'gzip',
			'Content-Type': 'application/json',
		}
		getConferenceRequest = getConferenceRequest || {}
		const response = await window.fetch('/oto/ConferenceService.Get', {
			method: 'POST',
			headers: headers,
			body: JSON.stringify(getConferenceRequest)
		})
		return response.json().then((json) => {
			if (json.error) {
				throw new Error(json.error)
			}
			return json
		}, reason => {
			console.error(reason); // Error!
		}
		).catch(error => {
			console.error('onRejected function called: ' + error.message);
		})
	}

	async list(listConferenceRequest) {
		const headers = {
			'Accept': 'application/json',
			'Accept-Encoding': 'gzip',
			'Content-Type': 'application/json',
		}
		listConferenceRequest = listConferenceRequest || {}
		const response = await fetch('/oto/ConferenceService.List', {
			method: 'POST',
			headers: headers,
			body: JSON.stringify(listConferenceRequest)
		})
		return response.json().then((json) => {
			if (json.error) {
				throw new Error(json.error)
			}
			return json
		}, reason => {
			console.error(reason); // Error!
		}
		).catch(error => {
			console.error('onRejected function called: ' + error.message);
		})
	}

}

